<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SampleApi</name>
    </assembly>
    <members>
        <member name="T:SampleApi.Controllers.AccountController">
            <summary>
            Creates a new account controller used to authenticate the user.
            </summary>
        </member>
        <member name="M:SampleApi.Controllers.AccountController.#ctor(SampleApi.Providers.Security.ITokenGenerator,SampleApi.Providers.Security.IPasswordHasher,SampleApi.DAL.IUserDAO)">
            <summary>
            Creates a new account controller.
            </summary>
            <param name="tokenGenerator">A token generator used when creating auth tokens.</param>
            <param name="passwordHasher">A password hasher used when hashing passwords.</param>
            <param name="userDao">A data access object to store user data.</param>
        </member>
        <member name="M:SampleApi.Controllers.AccountController.Register(SampleApi.Models.Account.AuthenticationModel)">
            <summary>
            Registers a user and provides a bearer token.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.Controllers.AccountController.Login(SampleApi.Models.Account.AuthenticationModel)">
            <summary>
            Authenticates the user and provides a bearer token.
            </summary>
            <param name="model">An object including the user's credentials.</param> 
            <returns></returns>
        </member>
        <member name="M:SampleApi.Controllers.PhotosController.GetPhotos(System.Int32)">
            <summary>
            When a pothole detail page loads, get a list photos that are associated with that particular pothole
            so they can be displayed on the page.
            </summary>
            <param name="potholeId">gets the photos associated with this specific pothole.</param>
            <returns>List of photos</returns>
        </member>
        <member name="M:SampleApi.Controllers.PotholesController.GetFilteredPotholes(System.String)">
            <summary>
            Get a list of potholes that is filtered by their status.
            </summary>
            <param name="status">Depending on the preference of the user, you can look at reported, inspected or repaired potholes.</param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.Controllers.PotholesController.DeletePothole(System.Int32)">
            <summary>
            Deletes a pothole that has been selected by the user.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.Controllers.PotholesController.GetPothole(System.Int32)">
            <summary>
            Gets the detail of a specific pothole to display on the page
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.Controllers.PotholesController.UpdatePothole(SampleApi.Models.Pothole)">
            <summary>
            Updates the pothole information that user inputs.
            Specifically, the date of inspection and begin and finish dates for the repairs.
            It also updates the severity level if needed.
            </summary>
            <param name="pothole"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.Controllers.PotholesController.AddPothole(SampleApi.Models.Pothole)">
            <summary>
            Adds a pothole to the system when a user reports it.
            </summary>
            <param name="pothole"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.Controllers.ValuesController.Get">
            <summary>
            Gets a collection of values. The requestor must be authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SampleApi.Controllers.ValuesController.GetOpen">
            <summary>
            Gets a collection of values. The requestor must be authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SampleApi.Controllers.ValuesController.RequestToken">
            <summary>
            Gets a special message. The requestor must be a user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SampleApi.DAL.IPhotoDAO.UploadPhoto(SampleApi.Models.Photo)">
            <summary>
            Saves the data from
            the photo that was uploaded
            and stored in vue to sql.
            </summary>
            <param name="photo"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.DAL.IPhotoDAO.GetPhoto(System.Int32)">
            <summary>
            Gets a single photo's information to save in the vue.
            </summary>
            <param name="photoId"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.DAL.IPhotoDAO.GetPhotos(System.Int32)">
            <summary>
            Gets a list of photos related to a single pothole.
            </summary>
            <param name="potholeId"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.DAL.IPotholeDAO.UpdatePothole(SampleApi.Models.Pothole)">
            <summary>
            Updates the inspection/repair status of a given pothole
            </summary>
            <param name="pothole"></param>
        </member>
        <member name="M:SampleApi.DAL.IPotholeDAO.DeletePothole(System.Int32)">
            <summary>
            Gets a list of potholes that need to be set up for inspection.
            </summary>
        </member>
        <member name="T:SampleApi.DAL.IUserDAO">
            <summary>
            An interface for user data objects.
            </summary>
        </member>
        <member name="M:SampleApi.DAL.IUserDAO.GetUser(System.String)">
            <summary>
            Retrieves a user from the system by username.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.DAL.IUserDAO.CreateUser(SampleApi.Models.User)">
            <summary>
            Creates a new user.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:SampleApi.DAL.IUserDAO.UpdateUser(SampleApi.Models.User)">
            <summary>
            Updates a user.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:SampleApi.DAL.IUserDAO.DeleteUser(SampleApi.Models.User)">
            <summary>
            Deletes a user from the system.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:SampleApi.DAL.PhotoSqlDAO.UploadPhoto(SampleApi.Models.Photo)">
            <summary>
            Send a query to the SQL database to save the photo information for future use.
            </summary>
            <param name="photo">Sends in the information that needs to be saved.</param>
            <returns>The photo id number of the photo just created in the system.</returns>
        </member>
        <member name="M:SampleApi.DAL.PhotoSqlDAO.GetPhoto(System.Int32)">
            <summary>
            Create a SQL query to get the information for one photo when called.
            </summary>
            <param name="photoId">Gets a photo by id</param>
            <returns>Photo</returns>
        </member>
        <member name="M:SampleApi.DAL.PhotoSqlDAO.MapRowToPhoto(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Map the data received from SQL to a photo object
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.DAL.PhotoSqlDAO.GetPhotos(System.Int32)">
            <summary>
            Get a list of photos to display when the detail page is called up.
            </summary>
            <param name="potholeId">The pothole id</param>
            <returns>A list of photos</returns>
        </member>
        <member name="T:SampleApi.DAL.UserSqlDAO">
            <summary>
            A SQL Dao for user objects.
            </summary>
        </member>
        <member name="M:SampleApi.DAL.UserSqlDAO.#ctor(System.String)">
            <summary>
            Creates a new sql dao for user objects.
            </summary>
            <param name="connectionString">the database connection string</param>
        </member>
        <member name="M:SampleApi.DAL.UserSqlDAO.CreateUser(SampleApi.Models.User)">
            <summary>
            Saves the user to the database.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:SampleApi.DAL.UserSqlDAO.DeleteUser(SampleApi.Models.User)">
            <summary>
            Deletes the user from the database.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:SampleApi.DAL.UserSqlDAO.GetUser(System.String)">
            <summary>
            Gets the user from the database.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.DAL.UserSqlDAO.UpdateUser(SampleApi.Models.User)">
            <summary>
            Updates the user in the database.
            </summary>
            <param name="user"></param>
        </member>
        <member name="T:SampleApi.Models.Account.AuthenticationModel">
            <summary>
            Represents an authentication model request.
            </summary>
        </member>
        <member name="P:SampleApi.Models.Account.AuthenticationModel.Username">
            <summary>
            The user's username.
            </summary>
        </member>
        <member name="P:SampleApi.Models.Account.AuthenticationModel.Password">
            <summary>
            The user's password.
            </summary>
        </member>
        <member name="T:SampleApi.Models.User">
            <summary>
            Represents a user in the system.
            </summary>
        </member>
        <member name="P:SampleApi.Models.User.Id">
            <summary>
            The user's id.
            </summary>        
        </member>
        <member name="P:SampleApi.Models.User.Username">
            <summary>
            The user's username.
            </summary>        
        </member>
        <member name="P:SampleApi.Models.User.Password">
            <summary>
            The user's password.
            </summary>
        </member>
        <member name="P:SampleApi.Models.User.Salt">
            <summary>
            The user's salt.
            </summary>
        </member>
        <member name="P:SampleApi.Models.User.Role">
            <summary>
            The user's role.
            </summary>
        </member>
        <member name="T:SampleApi.Program">
            <summary>
            The entry point for the api.
            </summary>
        </member>
        <member name="M:SampleApi.Program.Main(System.String[])">
            <summary>
            Entry point method for the api.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:SampleApi.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            Creates the web host to run the api.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:SampleApi.Providers.Security.IPasswordHasher">
            <summary>
            Represents a password hasher.
            </summary>
        </member>
        <member name="M:SampleApi.Providers.Security.IPasswordHasher.ComputeHash(System.String)">
            <summary>
            Given a clear text password, hash the password and return a Password Hash object.
            </summary>
            <param name="plainTextPassword">the password as given by the user.</param>
            <returns>A hashed password object.</returns>
        </member>
        <member name="M:SampleApi.Providers.Security.IPasswordHasher.VerifyHashMatch(System.String,System.String,System.String)">
            <summary>
            Verifies a match of an existing hashed password against a user input.
            </summary>
            <param name="existingHashedPassword">The existing hashed password.</param>
            <param name="plainTextPassword">The password as typed in by the user</param>
            <param name="salt">The salt used to compute the original hash.</param>
            <returns></returns>
        </member>
        <member name="T:SampleApi.Providers.Security.ITokenGenerator">
            <summary>
            Represents an authentication token interface.
            </summary>
        </member>
        <member name="M:SampleApi.Providers.Security.ITokenGenerator.GenerateToken(System.String,System.String)">
            <summary>
            Generates a new authentication token.
            </summary>
            <param name="username">The user's username</param>
            <param name="role">The user's role</param>
            <returns></returns>
        </member>
        <member name="T:SampleApi.Providers.Security.JwtGenerator">
            <summary>
            Represents a JWT generator.
            </summary>
        </member>
        <member name="M:SampleApi.Providers.Security.JwtGenerator.#ctor(System.String)">
            <summary>
            Creates a new JWT generator.
            </summary>
            <param name="secret">The app's secret to use when signing the token.</param>
        </member>
        <member name="M:SampleApi.Providers.Security.JwtGenerator.GenerateToken(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:SampleApi.Providers.Security.PasswordHash">
            <summary>
            Represents a hashed password.
            </summary>
        </member>
        <member name="M:SampleApi.Providers.Security.PasswordHash.#ctor(System.String,System.String)">
            <summary>
            Creates a new hashed password.
            </summary>
            <param name="password">The hashed password</param>
            <param name="salt">The salt used to get the hashed password.</param>
        </member>
        <member name="P:SampleApi.Providers.Security.PasswordHash.Password">
            <summary>
            The hashed password
            </summary>
        </member>
        <member name="P:SampleApi.Providers.Security.PasswordHash.Salt">
            <summary>
            The salt used to get the hashed password.
            </summary>
        </member>
        <member name="T:SampleApi.Providers.Security.PasswordHasher">
            <summary>
            The hash provider provides functionality to hash a plain text password and validate 
            an existing password against its hash.
            </summary>
        </member>
        <member name="M:SampleApi.Providers.Security.PasswordHasher.ComputeHash(System.String)">
            <summary>
            Hashes a plain text password.
            </summary>
            <param name="plainTextPassword"></param>
            <returns></returns>
        </member>
        <member name="M:SampleApi.Providers.Security.PasswordHasher.VerifyHashMatch(System.String,System.String,System.String)">
            <summary>
            Verifies if an existing hashed password matches a plaintext password (+salt).
            </summary>
            <param name="existingHashedPassword">The password we are comparing to.</param>
            <param name="plainTextPassword">The plaintext password being validated.</param>
            <param name="salt">The salt used to get the existing hashed password.</param>
            <returns></returns>
        </member>
        <member name="T:SampleApi.Startup">
            <summary>
            The asp.net api startup class.
            </summary>
        </member>
        <member name="M:SampleApi.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates a startup class instance.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:SampleApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures all of the services used by the application.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:SampleApi.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Includes middleware configuration for the HTTP Request Pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
